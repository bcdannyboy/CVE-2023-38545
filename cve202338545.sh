#!/bin/bash

# Default IP addresses
SOCKS5_IP="localhost"
HTTP_IP="localhost"

# Initialize vulnerability status variables
status_socks5=""
status_socks5_hostname=""

# Parse command-line arguments for IP addresses
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --socks5-ip) SOCKS5_IP="$2"; shift ;;
        --http-ip) HTTP_IP="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Function to test vulnerability with different curl options
test_vulnerability() {
    local curl_option=$1
    local status_var_name=$2
    error_output=$(curl -L --max-time 10 --location --max-redirs 50 --verbose --ftp-skip-pasv-ip $curl_option $SOCKS5_IP:1080 --resolve "$HTTP_IP:8080:0.0.0.0" --no-sessionid http://$HTTP_IP:8080/poc 2>&1)
    exit_code=$?

    # Print out all curl messages for debugging
    echo "=== Curl Messages for $curl_option ==="
    echo "$error_output"
    echo "======================================"

    if [[ $exit_code -eq 0 ]]; then
        eval $status_var_name="'Inconclusive, likely not vulnerable'"
    else
        if [[ $error_output == *"heap buffer overflow"* || $error_output == *"Segmentation fault"* ]]; then
            eval $status_var_name="'Vulnerable'"
        elif [[ $error_output == *"Out of memory" ]]; then
            eval $status_var_name="'Likely Vulnerable, got an out of memory error'"
        else
            eval $status_var_name="'Inconclusive, further investigation needed'"
        fi
    fi
}

# Check if curl is installed and get its version
if ! curl_version=$(curl -V 2>/dev/null); then
    echo "[*] System is not vulnerable to CVE-2023-38545 (curl not installed)"
    exit 1
fi

# Extract the version number from the first line of the curl -V output
libcurl_version=$(echo "$curl_version" | head -n 1 | awk '{print $2}')

# Check if the version is within the vulnerable range
if [[ $(echo -e "$libcurl_version\n7.69.0" | sort -V | head -n1) == "7.69.0" && $(echo -e "$libcurl_version\n8.3.1" | sort -V | head -n1) != "8.3.1" ]]; then
    # Test vulnerability with -x socks5h://
    test_vulnerability "-x socks5://" "status_socks5"

    # Test vulnerability with --socks5-hostname
    test_vulnerability "--socks5-hostname" "status_socks5_hostname"

    # Print the vulnerability status for both options
    echo "=== Vulnerability Status ==="
    echo "-x socks5://: $status_socks5"
    echo "--socks5-hostname: $status_socks5_hostname"
    echo "============================"
else
    echo "[*] System is not vulnerable to CVE-2023-38545 (non-vulnerable version $libcurl_version)"
    exit 1
fi
