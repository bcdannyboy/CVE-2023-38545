#!/bin/bash

# Default IP addresses
SOCKS5_IP="localhost"
HTTP_IP="localhost"

# Parse command-line arguments for IP addresses
while [[ "$#" -gt 0 ]]; do
    case $1 in
        --socks5-ip) SOCKS5_IP="$2"; shift ;;
        --http-ip) HTTP_IP="$2"; shift ;;
        *) echo "Unknown parameter passed: $1"; exit 1 ;;
    esac
    shift
done

# Check if curl is installed and get its version
if ! curl_version=$(curl -V 2>/dev/null); then
    echo "[*] System is not vulnerable to CVE-2023-38545 (curl not installed)"
    exit 1
fi

# Extract the version number from the first line of the curl -V output
libcurl_version=$(echo "$curl_version" | head -n 1 | awk '{print $2}')

# Check if the version is within the vulnerable range
if [[ "$libcurl_version" > "7.69.0" && "$libcurl_version" < "8.3.1" ]]; then
    # Use curl to make a GET request through a SOCKS5 proxy with a long hostname
    # Enable following redirects and set a limit on the number of redirects to follow
    error_output=$(curl -L --max-time 10 --location --max-redirs 50 --verbose --ftp-skip-pasv-ip -x socks5://$SOCKS5_IP:1080 http://$HTTP_IP:8080/poc 2>&1)
    exit_code=$?

    # Print out all curl messages for debugging
    echo "=== Curl Messages ==="
    echo "$error_output"
    echo "====================="

    if [[ $exit_code -eq 0 ]]; then
        echo "[*] Inconclusive, likely not vulnerable"
    else
        if [[ $error_output == *"heap buffer overflow"* || $error_output == *"Segmentation fault"* ]]; then
            echo "[*] System is vulnerable to CVE-2023-38545"
        else
            echo "[*] Inconclusive, further investigation needed"
        fi
    fi
else
    echo "[*] System is not vulnerable to CVE-2023-38545 (non-vulnerable version $libcurl_version)"
    exit 1
fi
